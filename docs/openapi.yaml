# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---
openapi: 3.0.3

info:
#  x-logo:
#    url: 'https://p2p.org/'
  title: |
    Staking rewards API.

    This doc describes how you can get data about staking rewards by different parameters in several POS chains.
  description: |
    # Overview
    
    This section provides an overview of the API design, methods, and supported use cases.

    Most of the endpoints accept `JSON` as input and return `JSON` responses.
    This means that you must usually add the following headers to your request:
    ```
    Content-type: application/json
    Accept: application/json
    ```

    # Trying the API

    You can use a third party client, such as [curl](https://curl.haxx.se/), [HTTPie](https://httpie.org/),
    [Postman](https://www.postman.com/) or [the Insomnia rest client](https://insomnia.rest/) to test
    the Staking rewards API.

    Note that you will need to pass credentials data.

    For e.g., here is how to get blockchains list with [curl](https://p2p.staking.api/blockchains/list), when basic authorization is used:
    ```bash
    curl -X GET 'https://staking-data-api-p2p.hasura.app/api/rest/blockchains' \
    -H 'Content-Type: application/json' \
    -H 'x-hasura-admin-secret: secret' \
    ```

    # Authorization

    Using `API key` header to interact with API.

    Please request us for access.

    # Errors

    We follow the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807)
    also known as Problem Details for HTTP APIs. As with our normal API responses,
    your client must be prepared to gracefully handle additional members of the response.

    ## Unauthorized

    This indicates that the client request has not been completed because
    it lacks valid authentication credentials for the requested resource. Please check that you have valid credentials.

    ## NotFound

    This client error response indicates that the server cannot find the requested resource.

    ## Unknown (Internal Server Error)

    This means that the server encountered an unexpected condition that prevented it from
    fulfilling the request.

  version: '0.1'
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: P2P Software
    url: https://p2p.org

servers:
  - url: https://staking-data-api-p2p.hasura.app/api/rest
    description: Staking rewards API.

paths:
  # Database entities
  /health:
    get:
      summary: Check indexer health
      description: |
        responds with {"status":"live"} if the system is healthy.      
      tags: [ System ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /metrics:
    get:
      summary: Prometheus metrics
      description: |
        Provides Prometheus metrics for Grafana.
      tags: [ System ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /blocks/pause:
    get:
      summary: Pauses indexer
      description: |
        Pauses blocks synchronization.
      tags: [ Blocks ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksPause'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /blocks/resume:
    get:
      summary: Resumes indexer
      description: |
        Resumes blocks synchronization.
      tags: [ Blocks ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksResume'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /blocks/restart-unporcessed:
    get:
      summary: Restart unprocessed blocks
      description: |
        Restarts the extraction of all unprocessed blocks. 
        Increase the memory of the BlockProcessor instance before calling
        this method if there were problems with block data extraction.
      tags: [ Blocks ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksRestartUnprocessed'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /blocks/process/{blockId}:
    get:
      summary: Process specified block
      description: |
        Manually processes the specified blockId.
      tags: [ Blocks ]
      parameters:
        - $ref: '#/components/parameters/BlockId'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksProcess'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /blocks/process/{startBlockId}/{endBlockId}:
    get:
      summary: Process specified blocks range
      description: |
        Manually processes a range of blocks from startBlockId to endBlockId.
      tags: [ Blocks ]
      parameters:
        - $ref: '#/components/parameters/StartBlockId'
        - $ref: '#/components/parameters/EndBlockId'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksProcessRange'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'



components:
  # Reusable schemas (data models)
  schemas:
    # Database entities
    Health:
      description: >
        System healh status

      type: object
      example: { status: "live" }
      properties:
        status:
          type: string
          example: "live"

    Metrics:
      description: >
        Prometheus metrics
      type: object
      properties:
        status:
          type: string
          example: success

    BlocksPause:
      description: >
        Status of pausing the indexer
      type: object
      properties:
        status:
          type: string
          example: success

    BlocksResume:
      description: >
        Status of resuming the indexer
      type: object
      properties:
        status:
          type: string
          example: success

    BlocksRestartUnprocessed:
      description: >
        Status of restart unprocessed blocks
      type: object
      properties:
        status:
          type: string
          example: success

    BlocksProcess:
      description: >
        Status of starting processing specified block
      type: object
      properties:
        status:
          type: string
          example: success

    BlocksProcessRange:
      description: >
        Status of starting processing range of blocks
      type: object
      properties:
        status:
          type: string
          example: success
          
    # Error response
    401ErrorCode:
      description: |
        [RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.
      type: object
      properties:
        code:
          type: string
          example: 'access-denied'
          description: A short, human-readable summary of the problem type.
        error:
          type: string
          example: 'invalid x-hasura-admin-secret/x-hasura-access-key'
          description: A human-readable explanation specific to this occurrence of the problem.
        path:
          type: string
          example: '$'
          description: The full path to the result field where the error was raised.
      required:
        - code
        - error
        - path

    404ErrorCode:
      description: |
        [RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.
      type: object
      properties:
        code:
          type: string
          example: 'not-found'
          description: A short, human-readable summary of the problem type.
        error:
          type: string
          example: 'Endpoint not found'
          description: A human-readable explanation specific to this occurrence of the problem.
        path:
          type: string
          example: '$'
          description: The full path to the result field where the error was raised.
      required:
        - code
        - error
        - path

    500ErrorCode:
      description: |
        [RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.
      type: object
      properties:
        code:
          type: string
          example: 'error'
          description: A short, human-readable summary of the problem type.
        error:
          type: string
          example: 'Unknown server error'
          description: A human-readable explanation specific to this occurrence of the problem.
        path:
          type: string
          example: '$'
          description: The full path to the result field where the error was raised.
      required:
        - code
        - error
        - path

    CollectionInfo:
      description: Metadata about collection.
      type: object
      properties:
        total_entries:
          type: integer
          description: Count of objects in the current result set.

  # Reusable path, query, header and cookie parameters
  parameters:
   
    BlockId:
      in: path
      name: blockId
      schema:
        type: number
      required: true
      description: |
        The block id

    StartBlockId:
      in: path
      name: startBlockId
      schema:
        type: number
      required: true
      description: |
        Start block Id

    EndBlockId:
      in: path
      name: endBlockId
      schema:
        type: number
      required: true
      description: |
        End block Id

  # Reusable request bodies
  requestBodies: {}

  # Reusable responses, such as 401 Unauthenticated or 400 Bad Request
  responses:
    # 401
    'Unauthenticated':
      description: Request not authenticated due to missing, invalid, authentication info.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/401ErrorCode'
    # 404
    'NotFound':
      description: A specified resource is not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/404ErrorCode'
    # 500
    'Unknown':
      description: Unknown server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/500ErrorCode'

  # Reusable response headers
  headers: {}

  # Reusable examples
  examples: {}

  # Reusable links
  links: {}

  # Reusable callbacks
  callbacks: {}


tags:
  - name: System
  - name: Blocks


