# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---
openapi: 3.0.3

info:
#  x-logo:
#    url: 'https://p2p.org/'
  title: |
    Flow Indexer

    
  description: |
    # Overview
    
    Flow Indexer is the first open-source data warehouse designed to provide application-specific data for the Flow blockchain. Its purpose is to reduce costs and simplify the process of building wallets, dashboards, explorers, and dApps that interact with Flow blockchain.
    
    # Features

    - Real-time data (with a maximum delay of 20 seconds for a block to appear in the database).
    - High-speed extraction (up to 1000 blocks per hour for one instance with 1 CPU and 200MB RAM).
    - High scalability (100 instances can process 100K blocks per hour).
    - High-speed access to extracted data (up to 10 thousand rows per second).
    - Docker-compose in-house setup in 5 seconds.

    # Dependencies

    - Docker
    - Docker Compose

    # Ram requirements

    - BlockSensors: 1cpu, 200MB
    - BlockProcessor: 1-100cpu, 200MB
    - IndexerFramework: 1cpu, 500MB
    - PostgreSQL: 1cpu, 1GB
    - RabbitMQ: 1cpu, 300MB

    # Installation

    ## Docker installation

    ```
    1. Update package:

    sudo apt update

    2. Install package for HTTPS:

    sudo apt install apt-transport-https ca-certificates curl software-properties-common

    3. Add GPG-key for Docker:

    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    4. Add repository for Docker:

    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"

    5. Update package:

    sudo apt update

    6. Switch to Docker repository and install:

    apt-cache policy docker-ce

    7. Install Docker:

    sudo apt install docker-ce

    8. Check installation:

    sudo systemctl status docker

    Output info:
    docker install ubuntu
    Docker install Ubuntu

    9. Check Docker image:

    docker run hello-world

    You must see «Hello from Docker!»

    10. Install docker compose

    sudo apt install docker-compose

    11. Check docker-compose

    docker-compose --version

    Output info:

    docker-compose version 1.20.1, build 1719ceb
    ```


    ## Quick Start

    1. Create the .env file:
    ```
    cp .env.sample .env
    ```

    2. Specify the RPC URL in the .env file. For example:
    ```
    RPC_URI=https://rest-mainnet.onflow.org
    ```

    3. Specify the block ID from which you want to start the sync. For example:
    ```
    START_BLOCK_ID=56000000
    ```

    4. Start the Docker containers:
    ```
    docker-compose up -d
    ```

    ## Scalability

    If you want to run 30 Block Processor instances then run it like

    ```
    docker-compose up -d --scale flow_block_processor=30
    ```

    
    # Project structure

    ```
    ├── db: Schema to set up a PostgreSQL database.
    ├── db-data: External Docker volume for PostgreSQL data.
    ├── docker-compose.yml: Definition of all containers (DB, RabbitMQ, BlockSensors, BlockProcessors, IndexerFramework, etc.).
    ├── framework: Indexer framework for controlling the indexing process (language: TypeScript).
    │   ├── Dockerfile: Common Docker rules for building the Indexer Framework container.
    │   └── src
    │       ├── index: Main application.
    │       ├── environment: Environment definition with default values.
    │       ├── loaders
    │       │   ├── database: PostgreSQL initializer using the Knex library.
    │       │   ├── express: Express initializer for the REST API.
    │       │   ├── logger: Pino logger initializer.
    │       │   ├── prometheus: Prometheus metrics initializer for Grafana.
    │       │   └── rabbitmq: RabbitMQ queue initializer.
    │       ├── models: Database models.
    │       └── modules
    │           ├── index: Modules initializer depending on the MODE (specified in docker-compose.yml).
    │           ├── BlockListener: Initial preloader and finalized block processor.
    │           │   ├── index: Module initializer.
    │           │   ├── controller: REST API endpoints.
    │           │   ├── service: Base module logic (get message from BlockSensor, check it, and send it to BlockProcessor queue).
    │           │   └── helpers
    │           │       └── database: Methods for getting/saving data in the database.
    │           ├── BlockWriter: Get block data structure from BlockProcessor and write it to the database.
    │           └── Monitoring: Check missing blocks and tasks.
    └── src: Main containers for fetching block data from the RPC node.
        ├── block-sensor: Python module for fetching the latest block height.
        │   ├── Dockerfile: Common Docker rules for building the Python container.
        │   └── sensor.py: Get the latest block height from the RPC node and send it to the RabbitMQ queue.
        └── block-processor: Python module for getting block data, transactions, and events from the RPC node.
            ├── Dockerfile: Common Docker rules for building the Python container.
            └── processor.py: Main script for getting structured block data from the RPC node.
    ```


    # Architecture diagram

    ![Architecture diagram](https://raw.githubusercontent.com/p2p-org/flow-indexer/main/docs/arch.png)


    # Database structure

    The database schema is described in the  [./db/init.sql](./db/init.sql). This file is used as the entrypoint SQL when Postgres is started using the ./db/Dockerfile defined in the ./docker-compose.yml file.

    The schema includes the following tables:

    - blocks: This table stores information about blocks, including block height, block ID, parent ID, block time, and parent voter signature.

    - events: This table stores information about events, including block height, event ID, transaction ID, transaction index, event index, type, and payload.

    - transactions: This table stores information about extrinsics, including block height, block ID, transaction ID, script, arguments, reference block ID, gas limit, payer, proposal key, authorizers, payload signatures, envelope signatures, execution, status, status code, error message, and computation used.

    - processing_tasks: This table stores information about processing tasks, including network ID, entity, entity ID, status, collection unique ID, start time, finish time, data, attempts, and a unique identifier (row_id).

    - processing_state: This table stores information about the processing state, including network ID, entity, entity ID, and a unique identifier (row_id). It also has a constraint to ensure a unique combination of entity and network ID.

    - processing_metrics: This table stores information about processing metrics, including delay_time_ms, process_time_ms, missed_count, duplicates_count, rpc_sync_diff_count, memory_usage_mb, not_processed_count, and restart.

    Please refer to the [./db/init.sql](./db/init.sql)  file for the detailed schema definition.


    # Indexer SLI metrics

    These metrics provide insights into the speed, data quality, and system performance of the indexer.

    1. Speed:
          - *delay_time_ms*: The time it takes for a block to appear in the blockchain and be found in the database, measured in milliseconds.
          - *process_time_ms*: The time it takes to process a block, measured in milliseconds.
    2. Data Quality:
          - *missed_count*: The number of missed blocks, indicating blocks that were not successfully processed or recorded.
          - *duplicates_count*: The number of duplicate records, indicating instances where the same data has been recorded multiple times.
          - *rpc_sync_diff_count*: The difference between the data in the RPC (Remote Procedure Call) and the data stored in the database.
    3. System:
          - *memory_usage_mb*: The amount of memory used for processing each task, measured in megabytes.
          - *not_processed_count*: The number of unprocessed tasks, indicating tasks that have not been completed.
          - *restart*: The count of indexer restarts, indicating the number of times the indexer has been restarted.



  version: '0.1'
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: P2P Software
    url: https://p2p.org

servers:
  - url: https://0.0.0.0:30000
    description: Staking rewards API.

paths:

servers:
  - url: https://staking-data-api-p2p.hasura.app/api/rest
    description: Staking rewards API.

paths:
  # Database entities
  /health:
    get:
      summary: Check indexer health
      description: |
        responds with {"status":"live"} if the system is healthy.      
      tags: [ System ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /metrics:
    get:
      summary: Prometheus metrics
      description: |
        Provides Prometheus metrics for Grafana.
      tags: [ System ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /blocks/pause:
    get:
      summary: Pauses indexer
      description: |
        Pauses blocks synchronization.
      tags: [ Blocks ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksPause'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /blocks/resume:
    get:
      summary: Resumes indexer
      description: |
        Resumes blocks synchronization.
      tags: [ Blocks ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksResume'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /blocks/restart-unporcessed:
    get:
      summary: Restart unprocessed blocks
      description: |
        Restarts the extraction of all unprocessed blocks. 
        Increase the memory of the BlockProcessor instance before calling
        this method if there were problems with block data extraction.
      tags: [ Blocks ]
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksRestartUnprocessed'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /blocks/process/{blockId}:
    get:
      summary: Process specified block
      description: |
        Manually processes the specified blockId.
      tags: [ Blocks ]
      parameters:
        - $ref: '#/components/parameters/BlockId'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksProcess'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'

  /blocks/process/{startBlockId}/{endBlockId}:
    get:
      summary: Process specified blocks range
      description: |
        Manually processes a range of blocks from startBlockId to endBlockId.
      tags: [ Blocks ]
      parameters:
        - $ref: '#/components/parameters/StartBlockId'
        - $ref: '#/components/parameters/EndBlockId'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlocksProcessRange'
        '401':
          $ref: '#/components/responses/Unauthenticated'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Unknown'



components:
  # Reusable schemas (data models)
  schemas:
    # Database entities
    Health:
      description: >
        System healh status

      type: object
      example: { status: "live" }
      properties:
        status:
          type: string
          example: "live"

    Metrics:
      description: >
        Prometheus metrics
      type: object
      properties:
        status:
          type: string
          example: success

    BlocksPause:
      description: >
        Status of pausing the indexer
      type: object
      properties:
        status:
          type: string
          example: success

    BlocksResume:
      description: >
        Status of resuming the indexer
      type: object
      properties:
        status:
          type: string
          example: success

    BlocksRestartUnprocessed:
      description: >
        Status of restart unprocessed blocks
      type: object
      properties:
        status:
          type: string
          example: success

    BlocksProcess:
      description: >
        Status of starting processing specified block
      type: object
      properties:
        status:
          type: string
          example: success

    BlocksProcessRange:
      description: >
        Status of starting processing range of blocks
      type: object
      properties:
        status:
          type: string
          example: success
          
    # Error response
    401ErrorCode:
      description: |
        [RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.
      type: object
      properties:
        code:
          type: string
          example: 'access-denied'
          description: A short, human-readable summary of the problem type.
        error:
          type: string
          example: 'invalid x-hasura-admin-secret/x-hasura-access-key'
          description: A human-readable explanation specific to this occurrence of the problem.
        path:
          type: string
          example: '$'
          description: The full path to the result field where the error was raised.
      required:
        - code
        - error
        - path

    404ErrorCode:
      description: |
        [RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.
      type: object
      properties:
        code:
          type: string
          example: 'not-found'
          description: A short, human-readable summary of the problem type.
        error:
          type: string
          example: 'Endpoint not found'
          description: A human-readable explanation specific to this occurrence of the problem.
        path:
          type: string
          example: '$'
          description: The full path to the result field where the error was raised.
      required:
        - code
        - error
        - path

    500ErrorCode:
      description: |
        [RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.
      type: object
      properties:
        code:
          type: string
          example: 'error'
          description: A short, human-readable summary of the problem type.
        error:
          type: string
          example: 'Unknown server error'
          description: A human-readable explanation specific to this occurrence of the problem.
        path:
          type: string
          example: '$'
          description: The full path to the result field where the error was raised.
      required:
        - code
        - error
        - path

    CollectionInfo:
      description: Metadata about collection.
      type: object
      properties:
        total_entries:
          type: integer
          description: Count of objects in the current result set.

  # Reusable path, query, header and cookie parameters
  parameters:
   
    BlockId:
      in: path
      name: blockId
      schema:
        type: number
      required: true
      description: |
        The block id

    StartBlockId:
      in: path
      name: startBlockId
      schema:
        type: number
      required: true
      description: |
        Start block Id

    EndBlockId:
      in: path
      name: endBlockId
      schema:
        type: number
      required: true
      description: |
        End block Id

  # Reusable request bodies
  requestBodies: {}

  # Reusable responses, such as 401 Unauthenticated or 400 Bad Request
  responses:
    # 401
    'Unauthenticated':
      description: Request not authenticated due to missing, invalid, authentication info.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/401ErrorCode'
    # 404
    'NotFound':
      description: A specified resource is not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/404ErrorCode'
    # 500
    'Unknown':
      description: Unknown server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/500ErrorCode'

  # Reusable response headers
  headers: {}

  # Reusable examples
  examples: {}

  # Reusable links
  links: {}

  # Reusable callbacks
  callbacks: {}


tags:
  - name: System
  - name: Blocks


